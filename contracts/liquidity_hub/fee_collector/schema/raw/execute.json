{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Collects protocol fees based on the configuration indicated by [FeesFor]",
      "type": "object",
      "required": [
        "collect_fees"
      ],
      "properties": {
        "collect_fees": {
          "type": "object",
          "required": [
            "collect_fees_for"
          ],
          "properties": {
            "collect_fees_for": {
              "$ref": "#/definitions/FeesFor"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swaps the assets (fees) sitting in the fee collector into the given [AssetInfo] if possible. A [SwapRoute] should be available at the router to be able to make the swaps.",
      "type": "object",
      "required": [
        "aggregate_fees"
      ],
      "properties": {
        "aggregate_fees": {
          "type": "object",
          "required": [
            "aggregate_fees_for",
            "asset_info"
          ],
          "properties": {
            "aggregate_fees_for": {
              "$ref": "#/definitions/FeesFor"
            },
            "asset_info": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Forward fees to the fee distributor. This will collect and aggregate the fees, to send them back to the fee distributor.",
      "type": "object",
      "required": [
        "forward_fees"
      ],
      "properties": {
        "forward_fees": {
          "type": "object",
          "required": [
            "epoch",
            "forward_fees_as"
          ],
          "properties": {
            "epoch": {
              "$ref": "#/definitions/Epoch"
            },
            "forward_fees_as": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "fee_distributor": {
              "type": [
                "string",
                "null"
              ]
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "pool_factory": {
              "type": [
                "string",
                "null"
              ]
            },
            "pool_router": {
              "type": [
                "string",
                "null"
              ]
            },
            "vault_factory": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Contract": {
      "type": "object",
      "required": [
        "address",
        "contract_type"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "contract_type": {
          "$ref": "#/definitions/ContractType"
        }
      },
      "additionalProperties": false
    },
    "ContractType": {
      "oneOf": [
        {
          "description": "Vault contract type",
          "type": "object",
          "required": [
            "vault"
          ],
          "properties": {
            "vault": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Pool/Pair contract type",
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Epoch": {
      "type": "object",
      "required": [
        "available",
        "claimed",
        "id",
        "start_time",
        "total"
      ],
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "claimed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "id": {
          "$ref": "#/definitions/Uint64"
        },
        "start_time": {
          "$ref": "#/definitions/Timestamp"
        },
        "total": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        }
      },
      "additionalProperties": false
    },
    "FactoryType": {
      "oneOf": [
        {
          "description": "Vault Factory",
          "type": "object",
          "required": [
            "vault"
          ],
          "properties": {
            "vault": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "start_after": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Pool Factory",
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "start_after": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/AssetInfo"
                  },
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FeesFor": {
      "oneOf": [
        {
          "description": "Refers to the fees on the given contracts",
          "type": "object",
          "required": [
            "contracts"
          ],
          "properties": {
            "contracts": {
              "type": "object",
              "required": [
                "contracts"
              ],
              "properties": {
                "contracts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Contract"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Refers to the fees on the contracts the given factory created",
          "type": "object",
          "required": [
            "factory"
          ],
          "properties": {
            "factory": {
              "type": "object",
              "required": [
                "factory_addr",
                "factory_type"
              ],
              "properties": {
                "factory_addr": {
                  "type": "string"
                },
                "factory_type": {
                  "$ref": "#/definitions/FactoryType"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
