{
  "contract_name": "incentive",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "lp_address"
    ],
    "properties": {
      "lp_address": {
        "description": "The address of the LP token that the incentive should be tied to.",
        "allOf": [
          {
            "$ref": "#/definitions/AssetInfo"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetInfo": {
        "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Opens a new liquidity flow",
        "type": "object",
        "required": [
          "open_flow"
        ],
        "properties": {
          "open_flow": {
            "type": "object",
            "required": [
              "curve",
              "end_timestamp",
              "flow_asset"
            ],
            "properties": {
              "curve": {
                "description": "The type of distribution curve.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Curve"
                  }
                ]
              },
              "end_timestamp": {
                "description": "The timestamp (in seconds since epoch) the flow should end.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "flow_asset": {
                "description": "The asset to be distributed in this flow.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Asset"
                  }
                ]
              },
              "start_timestamp": {
                "description": "The start timestamp (in seconds since epoch) of the flow.\n\nIf unspecified, the flow will start at the current block time.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Closes an existing liquidity flow.\n\nSender of the message must either be the contract admin or the creator of the flow.",
        "type": "object",
        "required": [
          "close_flow"
        ],
        "properties": {
          "close_flow": {
            "type": "object",
            "required": [
              "flow_id"
            ],
            "properties": {
              "flow_id": {
                "description": "The id of the flow to close.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Creates a new position to earn flow rewards.",
        "type": "object",
        "required": [
          "open_position"
        ],
        "properties": {
          "open_position": {
            "type": "object",
            "required": [
              "amount",
              "unbonding_duration"
            ],
            "properties": {
              "amount": {
                "description": "The amount to add to the position.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "unbonding_duration": {
                "description": "The amount of time (in seconds) before the LP tokens can be redeemed.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "expand_position"
        ],
        "properties": {
          "expand_position": {
            "type": "object",
            "required": [
              "amount",
              "unbonding_duration"
            ],
            "properties": {
              "amount": {
                "description": "The amount to add to the existing position.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ]
              },
              "unbonding_duration": {
                "description": "The unbond completion timestamp to identify the position to add to.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "close_position"
        ],
        "properties": {
          "close_position": {
            "type": "object",
            "required": [
              "unbonding_duration"
            ],
            "properties": {
              "unbonding_duration": {
                "description": "The unbonding duration of the position to close.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Asset": {
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "info": {
            "$ref": "#/definitions/AssetInfo"
          }
        },
        "additionalProperties": false
      },
      "AssetInfo": {
        "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Curve": {
        "description": "The type of distribution curve to exist.",
        "type": "string",
        "enum": [
          "linear"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Retrieves the current contract configuration.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves a specific flow.",
        "type": "object",
        "required": [
          "flow"
        ],
        "properties": {
          "flow": {
            "type": "object",
            "required": [
              "flow_id"
            ],
            "properties": {
              "flow_id": {
                "description": "The id of the flow to find.",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieves the current flows.",
        "type": "object",
        "required": [
          "flows"
        ],
        "properties": {
          "flows": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "positions"
        ],
        "properties": {
          "positions": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "The address to get positions for.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "Represents the configuration of the incentive contract.",
      "type": "object",
      "required": [
        "factory_address",
        "lp_address"
      ],
      "properties": {
        "factory_address": {
          "description": "The address of the incentive factory.",
          "allOf": [
            {
              "$ref": "#/definitions/CanonicalAddr"
            }
          ]
        },
        "lp_address": {
          "description": "The address of the LP token tied to the incentive contract.",
          "allOf": [
            {
              "$ref": "#/definitions/CanonicalAddr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CanonicalAddr": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "flow": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetFlowResponse",
      "type": "object",
      "properties": {
        "flow": {
          "description": "The flow that was searched for.",
          "anyOf": [
            {
              "$ref": "#/definitions/Flow"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Asset": {
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "info": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CanonicalAddr": {
          "$ref": "#/definitions/Binary"
        },
        "Curve": {
          "description": "The type of distribution curve to exist.",
          "type": "string",
          "enum": [
            "linear"
          ]
        },
        "Flow": {
          "description": "Represents a flow.",
          "type": "object",
          "required": [
            "claimed_amount",
            "curve",
            "end_timestamp",
            "flow_asset",
            "flow_creator",
            "flow_id",
            "start_timestamp"
          ],
          "properties": {
            "claimed_amount": {
              "description": "The amount of the `flow_asset` that has been claimed so far.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "curve": {
              "description": "The type of curve the flow has.",
              "allOf": [
                {
                  "$ref": "#/definitions/Curve"
                }
              ]
            },
            "end_timestamp": {
              "description": "The timestamp (in seconds block time) for when the flow will end.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "flow_asset": {
              "description": "The asset the flow was created to distribute.",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "flow_creator": {
              "description": "The account which opened the flow and can manage it.",
              "allOf": [
                {
                  "$ref": "#/definitions/CanonicalAddr"
                }
              ]
            },
            "flow_id": {
              "description": "A unique identifier of the flow.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_timestamp": {
              "description": "The timestamp (in seconds block time) for when the flow began.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "flows": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetFlowsResponse",
      "type": "object",
      "required": [
        "flows"
      ],
      "properties": {
        "flows": {
          "description": "The current flows.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Flow"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Asset": {
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "info": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CanonicalAddr": {
          "$ref": "#/definitions/Binary"
        },
        "Curve": {
          "description": "The type of distribution curve to exist.",
          "type": "string",
          "enum": [
            "linear"
          ]
        },
        "Flow": {
          "description": "Represents a flow.",
          "type": "object",
          "required": [
            "claimed_amount",
            "curve",
            "end_timestamp",
            "flow_asset",
            "flow_creator",
            "flow_id",
            "start_timestamp"
          ],
          "properties": {
            "claimed_amount": {
              "description": "The amount of the `flow_asset` that has been claimed so far.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "curve": {
              "description": "The type of curve the flow has.",
              "allOf": [
                {
                  "$ref": "#/definitions/Curve"
                }
              ]
            },
            "end_timestamp": {
              "description": "The timestamp (in seconds block time) for when the flow will end.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "flow_asset": {
              "description": "The asset the flow was created to distribute.",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "flow_creator": {
              "description": "The account which opened the flow and can manage it.",
              "allOf": [
                {
                  "$ref": "#/definitions/CanonicalAddr"
                }
              ]
            },
            "flow_id": {
              "description": "A unique identifier of the flow.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_timestamp": {
              "description": "The timestamp (in seconds block time) for when the flow began.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "positions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetPositionsResponse",
      "type": "object",
      "required": [
        "positions",
        "timestamp"
      ],
      "properties": {
        "positions": {
          "description": "All the positions a user has.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryPosition"
          }
        },
        "timestamp": {
          "description": "The current time of the blockchain.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "QueryPosition": {
          "oneOf": [
            {
              "description": "Represents a position that a user has deposited, but not yet begun to unbond.",
              "type": "object",
              "required": [
                "open_position"
              ],
              "properties": {
                "open_position": {
                  "type": "object",
                  "required": [
                    "amount",
                    "unbonding_duration",
                    "weight"
                  ],
                  "properties": {
                    "amount": {
                      "description": "The amount of LP tokens the user deposited into the position.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "unbonding_duration": {
                      "description": "The amount of time (in seconds) the user must wait after they begin the unbonding process.",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "weight": {
                      "description": "The amount of weight the position has.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Represents a position that a user has initiated the unbonding process on. The position may or may not be withdrawable.",
              "type": "object",
              "required": [
                "closed_position"
              ],
              "properties": {
                "closed_position": {
                  "type": "object",
                  "required": [
                    "amount",
                    "unbonding_timestamp",
                    "weight"
                  ],
                  "properties": {
                    "amount": {
                      "description": "The amount of LP tokens the user deposited into the position, and will receive after they withdraw.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "unbonding_timestamp": {
                      "description": "The timestamp (in seconds) the user unbonded at.",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "weight": {
                      "description": "The amount of weight the position has.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
