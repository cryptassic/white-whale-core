{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Creates a new incentive contract tied to the `lp_address` specified.",
      "type": "object",
      "required": [
        "create_incentive"
      ],
      "properties": {
        "create_incentive": {
          "type": "object",
          "required": [
            "lp_address"
          ],
          "properties": {
            "lp_address": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the configuration of the contract.\n\nUnspecified fields will not be updated.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "create_flow_fee": {
              "description": "The new fee that must be paid to create a flow.\n\nIf unspecified, the flow fee will not change.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Asset"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fee_collector_addr": {
              "description": "The new fee collector address to send flow creation fees to.\n\nIf unspecified, the fee collector address will not change.",
              "type": [
                "string",
                "null"
              ]
            },
            "incentive_contract_id": {
              "description": "The new code ID of the incentive contract.\n\nIf unspecified, the incentive contract id will not change.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "max_concurrent_flows": {
              "description": "The maximum amount of concurrent flows that can exist for a single LP token at a single time.\n\nIf unspecified, the max concurrent flows will not change.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "max_flow_start_time_buffer": {
              "description": "The new maximum start time buffer for a new flow (in seconds).\n\nIf unspecified, the flow start buffer will not change.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "max_unbonding_duration": {
              "description": "The maximum amount of seconds that a user must bond their tokens for.\n\nIf unspecified, the `max_unbonding_duration` will not change.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "min_unbonding_duration": {
              "description": "The minimum amount of seconds that a user must bond their tokens for.\n\nIf unspecified, the `min_unbonding_duration` will not change.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "migrate_incentive"
      ],
      "properties": {
        "migrate_incentive": {
          "type": "object",
          "required": [
            "incentive_address"
          ],
          "properties": {
            "code_id": {
              "description": "The new code ID to migrate the incentive contract to.\n\nIf unspecified, will default to the incentive factory's configured incentive code ID.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "incentive_address": {
              "description": "The address of the incentive contract",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
