{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Opens a new liquidity flow",
      "type": "object",
      "required": [
        "open_flow"
      ],
      "properties": {
        "open_flow": {
          "type": "object",
          "required": [
            "curve",
            "end_timestamp",
            "flow_asset"
          ],
          "properties": {
            "curve": {
              "description": "The type of distribution curve.",
              "allOf": [
                {
                  "$ref": "#/definitions/Curve"
                }
              ]
            },
            "end_timestamp": {
              "description": "The timestamp (in seconds since epoch) the flow should end.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "flow_asset": {
              "description": "The asset to be distributed in this flow.",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "start_timestamp": {
              "description": "The start timestamp (in seconds since epoch) of the flow.\n\nIf unspecified, the flow will start at the current block time.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Closes an existing liquidity flow.\n\nSender of the message must either be the contract admin or the creator of the flow.",
      "type": "object",
      "required": [
        "close_flow"
      ],
      "properties": {
        "close_flow": {
          "type": "object",
          "required": [
            "flow_id"
          ],
          "properties": {
            "flow_id": {
              "description": "The id of the flow to close.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates a new position to earn flow rewards.",
      "type": "object",
      "required": [
        "open_position"
      ],
      "properties": {
        "open_position": {
          "type": "object",
          "required": [
            "amount",
            "unbonding_duration"
          ],
          "properties": {
            "amount": {
              "description": "The amount to add to the position.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "receiver": {
              "description": "The receiver of the new position.\n\nThis is mostly used for the frontend helper contract.",
              "type": [
                "string",
                "null"
              ]
            },
            "unbonding_duration": {
              "description": "The amount of time (in seconds) before the LP tokens can be redeemed.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "expand_position"
      ],
      "properties": {
        "expand_position": {
          "type": "object",
          "required": [
            "amount",
            "unbonding_duration"
          ],
          "properties": {
            "amount": {
              "description": "The amount to add to the existing position.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "unbonding_duration": {
              "description": "The unbond completion timestamp to identify the position to add to.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "close_position"
      ],
      "properties": {
        "close_position": {
          "type": "object",
          "required": [
            "unbonding_duration"
          ],
          "properties": {
            "unbonding_duration": {
              "description": "The unbonding duration of the position to close.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Curve": {
      "description": "The type of distribution curve to exist.",
      "oneOf": [
        {
          "description": "A linear curve that releases assets as we approach the end of the flow period.",
          "type": "string",
          "enum": [
            "linear"
          ]
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
