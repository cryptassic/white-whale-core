{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetPositionsResponse",
  "type": "object",
  "required": [
    "positions",
    "timestamp"
  ],
  "properties": {
    "positions": {
      "description": "All the positions a user has.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueryPosition"
      }
    },
    "timestamp": {
      "description": "The current time of the blockchain.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "QueryPosition": {
      "oneOf": [
        {
          "description": "Represents a position that a user has deposited, but not yet begun to unbond.",
          "type": "object",
          "required": [
            "open_position"
          ],
          "properties": {
            "open_position": {
              "type": "object",
              "required": [
                "amount",
                "unbonding_duration",
                "weight"
              ],
              "properties": {
                "amount": {
                  "description": "The amount of LP tokens the user deposited into the position.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "unbonding_duration": {
                  "description": "The amount of time (in seconds) the user must wait after they begin the unbonding process.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "weight": {
                  "description": "The amount of weight the position has.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents a position that a user has initiated the unbonding process on. The position may or may not be withdrawable.",
          "type": "object",
          "required": [
            "closed_position"
          ],
          "properties": {
            "closed_position": {
              "type": "object",
              "required": [
                "amount",
                "unbonding_timestamp",
                "weight"
              ],
              "properties": {
                "amount": {
                  "description": "The amount of LP tokens the user deposited into the position, and will receive after they withdraw.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "unbonding_timestamp": {
                  "description": "The timestamp (in seconds) the user unbonded at.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "weight": {
                  "description": "The amount of weight the position has.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
