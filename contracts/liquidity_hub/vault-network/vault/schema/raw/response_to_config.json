{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "asset_info",
    "deposit_enabled",
    "fee_collector_addr",
    "fees",
    "flash_loan_enabled",
    "liquidity_token",
    "owner",
    "withdraw_enabled"
  ],
  "properties": {
    "asset_info": {
      "description": "The asset info the vault manages",
      "allOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        }
      ]
    },
    "deposit_enabled": {
      "description": "If deposits are enabled",
      "type": "boolean"
    },
    "fee_collector_addr": {
      "description": "The address of the fee collector",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "fees": {
      "description": "The fees associated with this vault",
      "allOf": [
        {
          "$ref": "#/definitions/VaultFee"
        }
      ]
    },
    "flash_loan_enabled": {
      "description": "If flash-loans are enabled",
      "type": "boolean"
    },
    "liquidity_token": {
      "description": "The address of the liquidity token",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "owner": {
      "description": "The owner of the vault",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "withdraw_enabled": {
      "description": "If withdrawals are enabled",
      "type": "boolean"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Fee": {
      "type": "object",
      "required": [
        "share"
      ],
      "properties": {
        "share": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "VaultFee": {
      "description": "Fees used by the flashloan vaults on the liquidity hub",
      "type": "object",
      "required": [
        "burn_fee",
        "flash_loan_fee",
        "protocol_fee"
      ],
      "properties": {
        "burn_fee": {
          "$ref": "#/definitions/Fee"
        },
        "flash_loan_fee": {
          "$ref": "#/definitions/Fee"
        },
        "protocol_fee": {
          "$ref": "#/definitions/Fee"
        }
      },
      "additionalProperties": false
    }
  }
}
